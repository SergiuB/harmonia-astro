---
import LogoMVV from "./LogoMVV.astro";

interface Props {
  colorAccent?: string;
  appearsFromRight?: boolean;
  title: string;
  description: string;
}
const {
  appearsFromRight = false,
  colorAccent,
  title,
  description,
} = Astro.props;
---

<>
  <LogoMVV
    class:list={[
      "logo-mvv w-32 h-32 opacity-0  transition delay-300",
      {
        "translate-x-full rotate-180": !appearsFromRight,
        "from-right -translate-x-full -rotate-180": appearsFromRight,
      },
    ]}
    accentFill={colorAccent}
  />
  <h1 class="text-primary text-5xl text-center mt-6">{title}</h1>
  <p class="text-dark text-lg text-center mt-6">
    {description}
  </p>
</>

<script>
  const logoMVVObserver = new IntersectionObserver((entries) => {
    entries &&
      entries.forEach((entry) => {
        const isFromRight = entry.target.classList.contains("from-right");
        if (entry.isIntersecting) {
          entry.target.classList.remove(
            "opacity-0",
            isFromRight ? "-translate-x-full" : "translate-x-full",
            isFromRight ? "-rotate-180" : "rotate-180",
          );
          entry.target.classList.add("opacity-100");
        } else {
          entry.target.classList.remove("opacity-100");
          entry.target.classList.add(
            "opacity-0",
            isFromRight ? "-translate-x-full" : "translate-x-full",
            isFromRight ? "-rotate-180" : "rotate-180",
          );
        }
      });
  }, {});
  document.querySelectorAll(".logo-mvv").forEach((el) => {
    logoMVVObserver.observe(el);
  });
</script>
