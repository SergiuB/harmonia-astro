---
import Menu from "./Menu.astro";
import MenuButton from "./MenuButton.astro";
import MenuItems from "./MenuItems.astro";
import { links } from "../content/links";
import LogoMVV from "./LogoMVV.astro";
import HarmoniaText from "./HarmoniaText.astro";
---

<style>
  #logo-container {
    transform: rotate(var(--logo-rotation));
  }
</style>
<header
  class="z-20 sticky top-0 my-4 py-2 px-4 h-16 flex justify-between gap-5 bg-white items-center container mx-auto"
>
  <div>
    <a href="/" class="flex gap-2">
      <div id="logo-container">
        <LogoMVV class="w-9 h-9" />
      </div>
      <HarmoniaText class="h-9" />
    </a>
  </div>
  <Menu>
    <MenuItems class="z-10">
      <div
        class="css-animation bg-white fixed top-0 left-0 w-full h-full transition-transform -translate-y-full group-[.open]:translate-y-0 flex flex-col justify-center items-center"
      >
        <div
          class="css-animation absolute -top-36 -left-64 group-[.open]:scale-75 opacity-50 scale-0 transition-transform delay-100"
        >
          <LogoMVV class="w-[513px] h-[485px]" />
        </div>
        <ul
          class="w-full h-full z-10 flex flex-col justify-center items-center backdrop-blur-md lg:gap-5 uppercase"
        >
          {
            links.map(({ title, url, className }) => (
              <li class="m-8">
                <a
                  class={`hover:text-secondary-blue text-dark transition-colors ${className ? className : ""}`}
                  href={url}
                >
                  {title}
                </a>
              </li>
            ))
          }
          <li
            class="css-animation mt-8 opacity-0 -translate-x-20 group-[.open]:translate-x-0 group-[.open]:opacity-100 group-[.open]:delay-150 transition-all"
          >
            <a
              class="css-animation bg-primary rounded-full px-10 py-2 text-white uppercase hover:bg-secondary-blue hover:text-primary transition-colors"
              href="new-facilitator"
            >
              Devino facilitator
            </a>
          </li>
        </ul>
      </div>
    </MenuItems>
    <MenuButton class="z-20" />
  </Menu>
</header>

<div class="header-shadow z-10 fixed top-0 h-16 w-full bg-white"></div>
<!--
<a href="/">Home</a>
<a href="/about/">About</a>
<a href="/blog/">Blog</a> -->

<script>
  const debounce = <T extends (...args: any[]) => any>(fn: T) => {
    // This holds the requestAnimationFrame reference, so we can cancel it if we wish
    let frame: number;

    // The debounce function returns a new function that can receive a variable number of arguments
    return (...params: Parameters<T>) => {
      // If the frame variable has been defined, clear it now, and queue for next frame
      if (frame) {
        cancelAnimationFrame(frame);
      }

      // Queue our function call for the next frame
      frame = requestAnimationFrame(() => {
        // Call our function and pass any params we received
        fn(...params);
      });
    };
  };

  window.addEventListener("scroll", debounce(handleScroll));

  function handleScroll() {
    const htmlEl = document.documentElement;

    // Add shadow to header
    const headerShadowEl = document.querySelector(".header-shadow");
    if (!headerShadowEl) throw new Error("Header shadow element not found");

    if (htmlEl.scrollTop > 60) {
      headerShadowEl.classList.add("shadow-lg");
    } else {
      headerShadowEl.classList.remove("shadow-lg");
    }

    // Rotate logo based on scroll position
    const logoEl = document.getElementById("logo-container");
    if (!logoEl) throw new Error("Logo element not found");

    const percentage =
      htmlEl.scrollTop / (htmlEl.scrollHeight - htmlEl.clientHeight);

    logoEl.style.setProperty("--logo-rotation", `${percentage * 720}deg`);
  }
</script>
