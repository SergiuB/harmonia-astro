---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import RootLayout from "../../layouts/RootLayout.astro";
import MarkdownRenderer from "../../components/MarkdownRenderer.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const facilitatorEntries = await getCollection("facilitators");
  return facilitatorEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<style is:global>
  .pswp__img {
    border-radius: 1.5rem;
  }
</style>

<RootLayout title={entry.data.name}>
  <section class="bg-primary py-10 text-white">
    <div class="container mx-auto max-w-screen-sm px-4">
      <h1 class="text-5xl pt-4 pb-3" transition:name="facilitators-title">
        {entry.data.name}
      </h1>
      <div class="flex flex-row gap-1.5">
        {
          entry.data.tags.map((tag) => (
            <p
              transition:name={`facilitators-tag-${tag}`}
              class="bg-secondary-teal rounded-xl  text-xxs font-semibold text-red  text-center p-1.5 uppercase"
            >
              {tag}
            </p>
          ))
        }
      </div>
      <div
        class="prose text-white mt-5 prose-headings:text-white prose-a:text-secondary-blue"
      >
        <Content />
      </div>
      {
        entry.data.services.length && (
          <div class="mt-4">
            <h2 class="text-2xl pt-4">Servicii</h2>
            <ul>
              {entry.data.services.map((service) => (
                <li
                  x-data="{ expanded: false }"
                  class="my-2 border-b border-light  pb-6"
                >
                  <div class="flex justify-between">
                    <div @click="expanded = ! expanded">
                      <h3 class="text-xl text-secondary-blue underline py-1">
                        {service.name}
                      </h3>
                      <div class="text-xs grid grid-cols-[auto_1px_auto_1px_auto] items-center">
                        <MarkdownRenderer
                          markdown={service.price}
                          class="mr-1"
                        />
                        <div class="bg-light h-full" />

                        <MarkdownRenderer
                          markdown={service.duration}
                          class="mx-1"
                        />
                        <div class="bg-light h-full" />

                        <MarkdownRenderer
                          markdown={service.summary}
                          class="ml-1"
                        />
                      </div>
                    </div>
                    {service.reserveLink && (
                      <a
                        href={service.reserveLink}
                        class="rounded-xl bg-secondary-blwue uppercase h-7 px-2 pt-1 mt-2"
                      >
                        Rezervă
                      </a>
                    )}
                  </div>
                  {(service.description || service.image) && (
                    <div x-show="expanded" x-transition class="pt-2">
                      {service.description &&
                        service.description.map((desc) => (
                          <p class="py-1 text-sm">{desc}</p>
                        ))}
                      {service.image && (
                        <Image
                          src={service.image}
                          alt={service.name}
                          class="object-cover w-full grayscale-[80%] hover:grayscale-0 transition duration-300 ease-in-out aspect-[3/2] rounded-3xl mt-2"
                        />
                      )}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </div>
        )
      }

      <div id="gallery" class="mt-6 grid grid-cols-2 gap-2">
        {
          entry.data.images.map((image, idx, imageArr) => (
            <a
              href={image.src}
              data-pswp-width={image.width}
              data-pswp-height={image.height}
              target="_blank"
              class:list={[
                "overflow-hidden border-[1px] border-primary hover:border-secondary",
                { "col-span-2 ": imageArr.length % 2 && idx === 0 },
              ]}
            >
              <Image
                src={image}
                alt={entry.data.name}
                class="object-cover w-full grayscale-[80%] hover:grayscale-0 transition duration-300 ease-in-out aspect-[3/2] rounded-3xl "
                width="525"
                height="350"
              />
            </a>
          ))
        }
      </div>
      <div class="flex flex-col mt-4">
        <h2 class="text-2xl pt-4 mb-2">Contact</h2>
        <div class="grid grid-cols-6 gap-2">
          {
            entry.data.location && (
              <>
                <p class="text-white ">Locație:</p>
                {entry.data.locationUrl ? (
                  <a
                    href={entry.data.locationUrl}
                    class="text-white underline col-span-5"
                  >
                    {entry.data.location}
                  </a>
                ) : (
                  <p class="col-span-5">{entry.data.location}</p>
                )}
              </>
            )
          }

          <p class="text-white">Telefon:</p>
          <a
            href={`tel:${entry.data.contact.phone}`}
            class="text-white underline col-span-5"
          >
            {entry.data.contact.phone}
          </a>
          {
            entry.data.contact.email && (
              <>
                <p class="text-white">Email:</p>
                <a
                  href={`mailto:${entry.data.contact.email}`}
                  class="text-white underline col-span-5"
                >
                  {entry.data.contact.email}
                </a>
              </>
            )
          }
          {
            entry.data.contact.website && (
              <>
                <p class="text-white">Web:</p>
                <a
                  href={
                    entry.data.contact.website.startsWith("http")
                      ? entry.data.contact.website
                      : `https://${entry.data.contact.website}`
                  }
                  class="text-white underline col-span-5"
                >
                  {entry.data.contact.website}
                </a>
              </>
            )
          }

          <p class="text-white">Social:</p>
          <div class="flex gap-2 col-span-5">
            {
              entry.data.contact.facebook && (
                <a
                  href={entry.data.contact.facebook}
                  class="text-white underline"
                >
                  Facebook
                </a>
              )
            }
            {
              entry.data.contact.instagram && (
                <a
                  href={entry.data.contact.instagram}
                  class="text-white underline"
                >
                  Instagram
                </a>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </section>
</RootLayout>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";
  const lightbox = new PhotoSwipeLightbox({
    gallery: "#gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
  });
  lightbox.init();
</script>
